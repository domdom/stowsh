#!/usr/bin/env bash
set -e

BASEDIR=$(dirname "$0")

# Do we rename paths that start with dot- to .?
OPTION_DOT_RENAME=yes

# Add a . to all top-level items
OPTION_DOT_PREFIX=no

# Verbose logging level
# 0 - quiet - errors only
# 1 - normal - actions only
# 2 - verbose - checks too
# 3 - everything - ??
OPTION_VERBOSE_LEVEL=1


# dryrun - print what we are doing, don't actually do anything
OPTION_DRYRUN=no

#####################################################
# Functional preemble
#####################################################

# TODO: Find a better row delimiter
_ROW_DELIMITER=$'\n'

row () {
    local new_arg
    IFS= read -r -d '' new_arg || return 1
    if [ "$new_arg" = "$_ROW_DELIMITER" ]; then
        "$@"
    else
        row "$@" "$new_arg"
    fi
}

map () {
    while row "$@"; do :; done
}

unmap () {
    printf "%s\0" "$@"
    printf "$_ROW_DELIMITER\0"
}

sink () {
    local s=$(xxd)
    echo "$s" | xxd -r
}

# From list still assumes that items are null delimited, but each row is
# assumed to have only one column
from_list () {
    while IFS= read -r -d '' item; do
        unmap "$item"
    done
}


#####################################################

# TODO: This is a compatibility hack for macos (which doesn't have realpath
# --relative-to), find a pure bash way?
relpath () {
    local src=$(realpath "$1")
    local tgt=$(realpath "$2")
    python -c 'import os, sys; print(os.path.relpath(*sys.argv[1:]))' "$src" "$tgt"
}


#####################################################
log () {
    local -i lvl=$1
    shift;

    if (( $lvl <= $OPTION_VERBOSE_LEVEL )); then
        unmap log "$@"
    fi
}


# FIXME: Remove these debug methods
debug () {
    echo "$@" >&2
}

display () {
    local name=$1
    shift;
    printf "%s\t" "$name" >&2
    printf "'%q'\t" "$@" >&2
    printf "\n" >&2
    unmap "$@"
}

#### Throws prints an error message and quits
error () {
    echo "$@" >&2
    exit 1
}

#######################################################

list_files () {
    find $1 -name \* -type f -print0 | from_list
}

get_mapping () {
    # Target directory, but remove trailing slash
    local target=${1%/}

    # Source directory, but remove trailing slash
    local source=${2%/}

    # source_file is the filename that we are going to stow
    local source_file=${3#"$source/"}
    local target_file="/$source_file"

    if [ "$OPTION_DOTFILES" = yes ]; then
        # Replace all occurances of '/dot-' with '/.'
        target_file=${target_file//\/dot-//.}
    fi

    # remove 
    target_file="$target$target_file"
    source_file="$source/$source_file"

    unmap "$target" "$source" "$target_file" "$source_file"
}


#####################################################
# Checks
#####################################################

# Check that a target component is not a link or file (it must be a directory)
check_mk_dir () {
    local target=$1
    local target_file_dir=$2

    # Directory already exists, nothing to do
    [ -d "$target_file_dir" ] && return 0

    # If it exists but is not a directory, then we can't expect symlinking to
    # work as expected
    [ -f "$target_file_dir" ] && error "mk_dir: $target_file_dir is not a directory"

    unmap mk_dir "$@"
}

# Check that we can remove a directory
check_rm_dir () {
    local target_file_dir=$2

    [ -d "$target_file_dir" ] || error "rm_dir: $target_file_dir is not a directory"

    unmap rm_dir "$@"
}


# Check that we can create a link
check_mk_link() {
    local target_file=$1
    local source_file=$2

    local target_dir=$(dirname "$target_file")

    # If the source_file and target_file are the same, we have nothing to do
    [ "$target_file" -ef "$target_dir/$source_file" ] && return 0

    # If the source_file and target_file are the same, we have nothing to do
    [ -f "$target_file" ] && error "mk_link: $target_file already exists"

    unmap mk_link "$@"
}

# Check that we can remove a link
check_rm_link () {
    local target_file=$1
    local source_file=$2
    [ "$target_file" -ef "$source_file" ] || error "rm_link: $target_file isn't owned by the package"

    unmap rm_link "$@"
}

#####################################################
# Actions
#####################################################

# Action to create directories
action_mk_dir () {
    local target_file_dir=$2
    mkdir -p "$target_file_dir"

    log 1 "[mkdir] $target_file_dir"
}
# Action to create the link
action_mk_link () {
    local target_file=$1
    local source_file=$2
    [[ "$target_file" -ef "$source_file" ]] || ln -s "$source_file" "$target_file"

    log 1 "[ln -s] $target_file -> $source_file"
}
# Action to remove symlink
action_rm_link () {
    local target_file=$1
    local source_file=$2

    rm "$target_file"

    log 1 "[rm ln] $target_file"
}
# Action to remove directory if it is empty
action_rm_dir () {
    local target=$1
    local target_file_dir=$2

    while [[ ! "$target_file_dir" -ef "$target" ]]; do
        if [ ! -d "$target_file_dir" ]; then
            return
        fi
        rmdir "$target_file_dir" || break
        log 1 "[rmdir] $target_file_dir"
        target_file_dir=$(dirname "$target_file_dir")
    done
}

# Handle all the log messages
action_log () {
    echo "$*"
}

# dispatch method
dispatch () {
    local prefix=$1
    local action=$2
    shift; shift;
    "${prefix}_${action}" "$@"
}


#####################################################
# Transforms
#####################################################
# Converts each target -> source pair into a list of actions to perform
operation_stow () {
    local target=$1
    local source=$2
    local target_file=$3
    local source_file=$4

    local target_dir=$(dirname "$target_file")

    unmap mk_dir "$target" "$target_dir"

    local relative_source_file=$(relpath "$source_file" "$target_dir")

    unmap mk_link "$target_file" "$relative_source_file"
}

# Converts each target -> source pair into a list of actions to perform
operation_unstow () {
    local target=$1
    local source=$2
    local target_file=$3
    local source_file=$4
    local target_dir=$(dirname "$target_file")

    # Remove the symbolic link
    unmap rm_link "$target_file" "$source_file"
    # Remove the directory, but only if it's empty after this
    unmap rm_dir "$target" "$target_dir"
}

##########################################################

stow () {
    # The operation to perform. Defaults to "stow"
    local op=$1
    # Location of the package
    local source=$2
    # Stow location. Defaults to 
    local target=$3

    list_files "$source" \
        | map unmap "$target" "$source" \
        | map get_mapping \
        | map operation_$op \
        | map dispatch check \
        | sink \
        | map dispatch action \
        | map dispatch action
}

stow "$@"
