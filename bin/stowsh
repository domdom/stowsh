#!/usr/bin/env bash
set -eo pipefail

DOTSTOW_USAGE="\
$0 version 0.0.1

SYNOPSIS:

    $0 [OPTIONS ...] [-S|-D|-R] PACKAGE ... [-S|-D|-R] PACKAGE ...

OPTIONS:

    -t DIR, --target DIR    Set the directory to stow the package in; for the
                            packages that follow. The default is the parent of
                            the current dir.

    -S, --stow              Stow the packages that follow this option.
    -D, --delete            Unstow the packages that follow this option.
    -R, --restow            Restow (like -D followed by -S).

    --dot-rename            Enable \"dot-\" prefix preprocessing for packages
                            that follow. Files and directories that begin with
                            \"dot-\" get that prefix replaced by a dot (.).
    --dot-prefix            Enable prefixing with dot (.) for packages that
                            follow. All top level names in the package get
                            prefixed with a dot (.).

    -n, --dryrun            Don't actually make any changes, just print.

    --                      Interpret all the remaining arguments as packages.
"

#####################################################
# Options
#####################################################
# Verbose logging level
# 0 - quiet - errors only
# 1 - normal - actions only
# 2 - verbose - checks too
# 3 - everything - ??
OPTION_VERBOSE_LEVEL=1

# dryrun - print what we are doing, don't actually do anything
OPTION_DRYRUN="no"

# Do we rename paths that start with dot- to .?
OPTION_DOT_RENAME="no"

# Add a . to all top-level items
OPTION_DOT_PREFIX="no"

#####################################################
# Functional preemble
#####################################################

# TODO: Find a better row delimiter
_ROW_DELIMITER=$'\n'

row () {
    local new_arg
    IFS= read -r -d '' new_arg || return 1
    if [ "$new_arg" = "$_ROW_DELIMITER" ]; then
        "$@"
    else
        row "$@" "$new_arg"
    fi
}

map () {
    while row "$@"; do :; done
}

unmap () {
    printf "%s\0" "$@"
    printf "$_ROW_DELIMITER\0"
}

sink () {
    local s=$(xxd)
    echo "$s" | xxd -r
}

# From list still assumes that items are null delimited, but each row is
# assumed to have only one column
from_list () {
    while IFS= read -r -d '' item; do
        unmap "$item"
    done
}


#####################################################

# TODO: This is a compatibility hack for macos (which doesn't have realpath
# --relative-to), find a pure bash way?
relpath () {
    python -c 'import os, sys; print(os.path.relpath(*sys.argv[1:]))' "$1" "$2"
}

abspath () {
    echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
}

# single-level realpath
absreadlink () {
    (
        if [ -L "$1" ]; then
            local file="$(readlink "$1")"
        else
            local file="$1"
        fi

        cd "$(dirname "$1")" || debug "NO DIRECTORY $1"

        echo "$(cd "$(dirname "$file")"; pwd)/$(basename "$file")"
    )
}


#####################################################
log () {
    local -i lvl=$1
    shift;

    if (( $lvl <= $OPTION_VERBOSE_LEVEL )); then
        unmap log "$@"
    fi
}


# FIXME: Remove these debug methods
debug () {
    echo "$@" >&2
}

display () {
    local name=$1
    shift;
    printf "%s\t" "$name" >&2
    printf "'%q'\t" "$@" >&2
    printf "\n" >&2
    unmap "$@"
}

#### Throws prints an error message and quits
error () {
    echo "$@" >&2
    exit 1
}

#######################################################

list_files () {
    find "$1" -name \* -not -type d -print0 | from_list
}

#####################################################
# Checks
#####################################################

# Check that a target component is not a link or file (it must be a directory)
check_mk_dir () {
    local target=$1
    local target_file_dir=$2

    # Directory already exists, nothing to do
    [ -d "$target_file_dir" ] && return 0

    # If it exists but is not a directory, then we can't expect symlinking to
    # work as expected
    [ -f "$target_file_dir" ] && error "mk_dir: $target_file_dir is not a directory"

    unmap mk_dir "$@"
}

# Check that we can remove a directory
check_rm_dir () {
    local target_file_dir=$2

    [ -d "$target_file_dir" ] || error "rm_dir: $target_file_dir is not a directory"

    unmap rm_dir "$@"
}


# Check that we can create a link
check_mk_link() {
    local target_file=$1
    local package_file=$2

    local target_dir=$(dirname "$target_file")

    # If the package_file and target_file are the same, we have nothing to do
    [ "$target_file" -ef "$package_file" ] && return 0

    # If the target_file already exists, we have an error
    [ -f "$target_file" ] && error "mk_link: $target_file already exists"

    unmap mk_link "$@"
}

# Check that we can remove a link
check_rm_link () {
    local package=$1
    local target_file=$2

    # There is no file, nothing to do
    [ ! -f "$target_file" ] && return 0

    in_package "$package" "$target_file" || error "rm_link: $target_file isn't owned by the package" 

    unmap rm_link "$@"
}

#####################################################
# Actions
#####################################################

# Action to create directories
action_mk_dir () {
    local target_file_dir=$2

    [ "$OPTION_DRYRUN" = no ] && mkdir -p "$target_file_dir"

    log 1 "[mkdir] $target_file_dir"
}
# Action to create the link
action_mk_link () {
    local target_file=$1
    local package_file=$2

    local target_dir=$(dirname "$target_file")
    local relative_package_file=$(relpath "$package_file" "$target_dir")

    [[ "$target_file" -ef "$package_file" ]] || [ "$OPTION_DRYRUN" = no ] && ln -s "$relative_package_file" "$target_file"

    log 1 "[ln -s] $target_file -> $relative_package_file"
}
# Action to remove symlink
action_rm_link () {
    local package=$1
    local target_file=$2

    [ "$OPTION_DRYRUN" = no ] && rm "$target_file"

    log 1 "[rm ln] $target_file"
}
# Action to remove directory if it is empty
action_rm_dir () {
    local target=$1
    local target_file_dir=$2

    while [[ ! "$target_file_dir" -ef "$target" ]]; do
        if [ ! -d "$target_file_dir" ]; then
            return
        fi
        [ "$OPTION_DRYRUN" = no ] && rmdir "$target_file_dir" > /dev/null 2>&1 || break
        log 1 "[rmdir] $target_file_dir"
        target_file_dir=$(dirname "$target_file_dir")
    done
}

# Handle all the log messages
action_log () {
    echo "$*"
}

# dispatch method
dispatch () {
    local prefix=$1
    local action=$2
    shift; shift;
    "${prefix}_${action}" "$@"
}


#####################################################
# Transforms
#####################################################
# Converts each target -> package pair into a list of actions to perform
operation_stow () {
    local target=$1
    local package=$2
    local target_file=$3
    local package_file=$4

    local target_file_dir=$(dirname "$target_file")
    unmap mk_dir "$target" "$target/$target_file_dir"
    unmap mk_link "$target/$target_file" "$package/$package_file"
}

# Converts each target -> package pair into a list of actions to perform
operation_unstow () {
    local target=$1
    local package=$2
    local target_file=$3
    local package_file=$4

    if in_package "$package" "$target/$target_file"; then
        local target_file_dir=$(dirname "$target_file")
        # Remove the symbolic link
        unmap rm_link "$target/$target_file" "$package"
        # Remove the directory, but only if it's empty after this
        unmap rm_dir "$target" "$target/$target_file_dir"
    fi
}

##########################################################

split_paths () {
    # Target directory, but remove trailing slash
    local target=${1%/}
    # Package directory, but remove trailing slash
    local package=${2%/}
    # package_file is the filename that we are going to stow
    local package_file=${3#"$package/"}

    # remove leading slashes
    local target_file=${package_file##/}

    if [ "$OPTION_DOT_RENAME" = yes ]; then
        # Add slash at the start so that the following substitution can match
        target_file="/$target_file"
        # Replace all occurances of '/dot-' with '/.'
        target_file=${target_file//\/dot-//.}
        # remove slashes again
        target_file=${target_file##/}
    fi

    if [ "$OPTION_DOT_PREFIX" = yes ]; then
        # Make sure that target doesn't start with dot alread
        if [[ "$target_file" != .* ]]; then
            target_file=".$target_file"
        fi
    fi

    unmap "$target" "$package" "$target_file" "$package_file"
}

get_real_path () {
    # Target directory, but remove trailing slash
    local target=${1%/}
    # Package directory, but remove trailing slash
    local package=${2%/}

    # target_file is the filename that we are going to check the real path of
    local target_file=${3#"$target/"}

    if [ -L "$target/$target_file" ]; then
        # Use readlink to unwrap one level of symlink
        local package_file=$(absreadlink "$target/$target_file")
        unmap "$target" "$package" "$target_file" "$package_file"
    fi
}

in_package () {
    local package=$1
    local target_file=$2

    local file_path=$(absreadlink "$2")
    local file_dir=$(dirname "$file_path")

    while [[ ! "$package" -ef "$file_dir" ]]; do
        if [ ! -d "$file_dir" ]; then
            return 1
        fi
        if [ "$file_dir" = "/" ]; then
            return 1
        fi
        file_dir=$(dirname "$file_dir")
    done

    return 0
}

stow () {
    local op=$1
    local package=$2
    local target=$3

    if [ "$op" = restow ]; then
        debug "[stow] $op $package to $target"
        stow unstow "$package" "$target"
        stow stow "$package" "$target"
    elif [ "$op" = stow ]; then
        debug "[stow] $op $package to $target"

        list_files "$package" \
            | map unmap "$target" "$package" \
            | map split_paths \
            | map operation_stow \
            | map dispatch check \
            | sink \
            | map dispatch action \
            | map dispatch action
    elif [ "$op" = unstow ]; then
        debug "[stow] $op $package from $target"

        list_files "$package" \
            | map unmap "$target" "$package" \
            | map split_paths \
            | map operation_unstow \
            | map dispatch check \
            | sink \
            | map dispatch action \
            | map dispatch action
    else
        error "unknown operation: $op"
    fi
}

process_arguments() {
    # The operation to perform
    local operation="stow"

    # the target directory for the stowed packages
    local target=".."

    # Process options options at the start. Because these are global options,
    # they must be set before we process any packages
    while (( $# )); do
        case "$1" in
            -t|--target)  shift; target="$1"; ;;

            -n|--dryrun)  OPTION_DRYRUN=yes; ;;

            --dot-rename) OPTION_DOT_RENAME=yes; ;;
            --dot-prefix) OPTION_DOT_PREFIX=yes; ;;

            -S|--stow)    operation="stow"; ;;
            -R|--restow)  operation="restow"; ;;
            -D|--delete)  operation="unstow"; ;;

            # Once we see something that is not an option, assume it is a package
            *) break;
        esac
        shift;
    done

    # Interpret package arguments
    while (( $# )); do
        case "$1" in
            -t|--target)  shift; target="$1"; ;;
            -S|--stow)    operation="stow"; ;;
            -R|--restow)  operation="restow"; ;;
            -D|--delete)  operation="unstow"; ;;
            --) shift; break; ;;
            *) stow "$operation" "$1" "$target"; ;;
        esac
        shift;
    done

    # Interpret the rest as packages (even ones that look like arguments)
    while (( $# )); do
        stow "$operation" "$1" "$target"
        shift
    done
}


# The main function, processes arguments
main () {
    if (( $# == 0 )); then
        echo "$DOTSTOW_USAGE"
        return
    fi
    process_arguments "$@"
}

main "$@"
